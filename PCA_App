library(shiny)
require(reshape2)
require(ggplot2)
require(gghighlight)
require(ggpubr)
require(dplyr)
require(ggiraph)
require(stringr)
require(ggalt)
require(plotly)
require(DT)


SPEECHES <- read.csv("Freq_CLUSTER.csv")
SPEECHES$Academic_percentile <- ecdf(SPEECHES$Academic_Language..Low.Frequency.)(SPEECHES$Academic_Language..Low.Frequency.)
SPEECHES$Public_percentile <- ecdf(SPEECHES$Public)(SPEECHES$Public)
SPEECHES$Emotion_Negative_percentile <- ecdf(SPEECHES$Emotion_Negative)(SPEECHES$Emotion_Negative)
SPEECHES$Relations_Negative_percentile <- ecdf(SPEECHES$Relations_Negative)(SPEECHES$Relations_Negative)
SPEECHES$Values_Negative_percentile <- ecdf(SPEECHES$Values_Negative)(SPEECHES$Values_Negative)
SPEECHES$FirstPerson_percentile <- ecdf(SPEECHES$FirstPerson)(SPEECHES$FirstPerson)
SPEECHES$Interactive_percentile <- ecdf(SPEECHES$Interactive)(SPEECHES$Interactive)
SPEECHES$Reasoning_percentile <- ecdf(SPEECHES$Reasoning)(SPEECHES$Reasoning)
SPEECHES$Emotion_Positive_percentile <- ecdf(SPEECHES$Emotion_Positive)(SPEECHES$Emotion_Positive)
SPEECHES$Relations_Positive_percentile <- ecdf(SPEECHES$Relations_Positive)(SPEECHES$Relations_Positive)
SPEECHES$Values_Positive_percentile <- ecdf(SPEECHES$Values_Positive)(SPEECHES$Values_Positive)
SPEECHES <- SPEECHES %>% mutate_at(vars(Academic_percentile, Public_percentile, Emotion_Negative_percentile, Relations_Negative_percentile,
                                        Values_Negative_percentile, FirstPerson_percentile, Interactive_percentile, Reasoning_percentile,
                                        Emotion_Positive_percentile, Relations_Positive_percentile, Values_Positive_percentile),
                                   funs(round(.,4)))

SPEECHES_profile1 <- SPEECHES[,c(1:6, 13, 26, 29, 33)]
colnames(SPEECHES_profile1)[6] <- "Academic"

p1main.melt = melt(SPEECHES_profile1, id = 1, measure = names(SPEECHES_profile1[c(6,8)]))
p1secondary.melt = melt(SPEECHES_profile1, id = 1, measure = names(SPEECHES_profile1[c(7,9:10)]))

p1main <- ggplot(p1main.melt,
                 aes(
                     x = variable,
                     y = value)) +  
    geom_boxplot(color = "red") + 
    ylim(0,17) +
    labs(title = "Info Profile Frequencies", x = "Main Clusters", y = "Frequency") +
    theme(plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 14, face =),
          axis.title=element_text(size=14,face="bold"),
          axis.text.x = element_text(size = 14),
          axis.line = element_line(colour = "grey"),
          axis.title.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0)),
          panel.background = element_rect(fill = "white"),
          panel.grid.major = element_line(colour = "grey90", size = 0.2),
          panel.grid.minor = element_line(colour = "grey98", size = 0.5),
          strip.background = element_rect(fill = "grey80", colour = "grey50")
    )

p1secondary <- ggplot(p1secondary.melt,
                      aes(
                          x = variable,
                          y = value)) + 
    geom_boxplot(color = "steelblue2") +
    ylim(0,17) + 
    theme(axis.line.y = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.title.y = element_blank(),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 14, face =),
          axis.title=element_text(size=14,face="bold"),
          axis.text.x = element_text(size = 11),
          axis.line = element_line(colour = "grey"),
          axis.title.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0)),
          panel.background = element_rect(fill = "white"),
          panel.grid.major = element_line(colour = "grey90", size = 0.2),
          panel.grid.minor = element_line(colour = "grey98", size = 0.5),
          strip.background = element_rect(fill = "grey80", colour = "grey50")) +
    labs(x = "Secondary Clusters", title = "")


# ggplot(profile1.melt, 
#            aes(
#                x = variable, 
#                y = value)) + 
# geom_boxplot(color = "red") + 
# theme_bw() + 
# theme(legend.position = "none", 
#       plot.title = element_text(size = 16, face = "bold"),
#       plot.subtitle = element_text(size = 14, face =),
#       axis.title=element_text(size=14,face="bold"),
#       axis.text.x = element_text(size = 14),  
#       axis.line = element_line(colour = "grey"),
#       axis.title.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0))) +
# facet_grid(~grouping, scales = "free") +
# labs(title = "Info Profile Frequencies", x = "Rhetorical Clusters", y = "Frequency") 

SPEECHES_profile2 <- SPEECHES[,c(1:5,12, 16, 20, 27, 28, 32)]

p2main.melt = melt(SPEECHES_profile2, id = 1, measure = names(SPEECHES_profile2[7:9]))
p2secondary.melt = melt(SPEECHES_profile2, id = 1, measure = names(SPEECHES_profile2[c(6,10:11)]))
    
p2main <- ggplot(p2main.melt,
                 aes(
                     x = variable,
                     y = value)) +  
    geom_boxplot(color = "red") + 
    ylim(0,17) +
    labs(title = "Involvement Profile Frequencies", x = "Main Clusters", y = "Frequency") +
    theme(plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 14, face =),
          axis.title=element_text(size=14,face="bold"),
          axis.text.x = element_text(size = 14),
          axis.line = element_line(colour = "grey"),
          axis.title.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0)),
          panel.background = element_rect(fill = "white"),
          panel.grid.major = element_line(colour = "grey90", size = 0.2),
          panel.grid.minor = element_line(colour = "grey98", size = 0.5),
          strip.background = element_rect(fill = "grey80", colour = "grey50")
    )

p2secondary <- ggplot(p2secondary.melt,
                      aes(
                          x = variable,
                          y = value)) + 
    geom_boxplot(color = "steelblue2") +
    ylim(0,17) + 
    theme(axis.line.y = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.title.y = element_blank(),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 14, face =),
          axis.title=element_text(size=14,face="bold"),
          axis.text.x = element_text(size = 11),
          axis.line = element_line(colour = "grey"),
          axis.title.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0)),
          panel.background = element_rect(fill = "white"),
          panel.grid.major = element_line(colour = "grey90", size = 0.2),
          panel.grid.minor = element_line(colour = "grey98", size = 0.5),
          strip.background = element_rect(fill = "grey80", colour = "grey50")) +
    labs(x = "Secondary Clusters", title = "")


loadings <- read.csv("loadings.csv")

scores <- read.csv("scores.csv")
scores$Role <- SPEECHES[,2]
scores$Topic <- SPEECHES[,3]
scores$X_woq <- str_replace_all(scores$X, "'", "")
scores$Unfiltered <- c("")

sparseScores <- read.csv("FinalSparsePCAscores_3PCs.csv")
colnames(sparseScores) <- c("Fulltag", "Role", "Topic", "PC1", "PC2", "PC3")
sparseScores$X_woq <- str_replace_all(sparseScores$Fulltag, "'", "")


# Define UI for application that draws a histogram
ui <- fluidPage(
    
    titlePanel("Interactive PCA Visualization"),
    
    hr(),
    
    tabsetPanel(
        tabPanel("Scores and Loadings Analysis",
                 fluidRow(
                     column(12,
                            h3("Principle Component Loadings"),
                            h5(em(
                                "The below bar plot shows the loading values of select Principle Components. The clusters are sorted in descending order
                    of absolute value to indiciate which rhetorical clusters have the greatest imapact."
                            )),
                     )
                 ),
                 br(),
                 fluidRow(
                     column(8,
                            plotOutput("loadingPlot", height = 600),
                     ),
                     column(4,
                            tags$div(
                                selectInput("loadingPC", label = h5("Principle Components"),
                                            choices = c(
                                                "PC1" = "Comp.1",
                                                "PC2" = "Comp.2", 
                                                "PC3" = "Comp.3"
                                            ),
                                            width = 110)
                            ),
                            h5("Most Impacful Clusters"),
                            verbatimTextOutput("loadingStats")
                     )
                 ),
                 
                 hr(),
                 
                 fluidRow(
                     column(12,
                            h3("Principle Component Scores"),
                            
                            h5(em(
                                "The below graph plots Principle Component 2 scores against Principle Component 1 scores for every speech.
                    Use the drop down menu to select which criteria you would like to filter/highlight on the plot. 
                    Colored lines encircle clusters, based on the selected filtering criteria."
                            ))
                     )
                 ),
                 
                 br(), 
                 fluidRow(
                     column(7,
                            girafeOutput("scorePlot", height = 500, width = "1000px")
                     ),
                     column(5,
                            tags$div(
                                selectInput("chooseColor", label = h5("Filter:"),
                                            choices = c(
                                                "Topic" = "Topic",
                                                "Role" = "Role", 
                                                "None" = "Unfiltered"
                                            ),
                                            selected = "Unfiltered",
                                            width = 110)),
                            sidebarPanel(
                                h5("Principal Component Breakdowns"),
                                verbatimTextOutput("loadingSummary1"),
                                verbatimTextOutput("loadingSummary2"),
                                width = 11)
                     )
                 )
        ),
        tabPanel("Profile Analysis",
                 fluidRow(
                     column(12,
                            h3("PC Profile Analyses"),
                            
                            h5(em(
                                "Selecting a point on the below sparse PCA plot will bring up the corresponding point and percentile on the rhetorical clusters of each profile.")),
                            h5(em("If instead you would like to search for a specific speech, please choose from the drop down menu and click the highlighted point on PCA plot to bring up the profile statistics."
                            ))
                     )
                 ),
                 fluidRow(
                     column(6,
                            tags$div(
                                selectInput("choosePoint", label = h5("Find Speech:"),
                                            choices = SPEECHES$Fulltag, width = 400)
                            ))
                 ),
                 fluidRow(
                     column(12,
                            plotlyOutput("sparsePlot",
                                         height = 700)
                     )
                 ),
                 fluidRow(
                     column(5,
                            verbatimTextOutput("click_info"),
                     )
                 ),
                 fluidRow(
                     column(3, style = 'padding-right:0px;',
                            plotOutput("profile1_main_plot", height = 500)
                     ),
                     column(3,
                            plotOutput("profile1_secondary_plot", height = 500)),
                     column(3, style = 'padding-right:0px;',
                            plotOutput("profile2_main_plot", height = 500)
                     ),
                     column(3,
                            plotOutput("profile2_secondary_plot", height = 500))
                 ),
                 fluidRow(
                     column(6,
                            hr(),
                            DT::dataTableOutput("profile1_percentile")),
                     column(6,
                            hr(),
                            DT::dataTableOutput("profile2_percentile")
                     )
                 )
        )
    )
)




# Define server logic required to draw a histogram
server <- function(input, output) {
    
    pc <- reactive({
        grep(input$loadingPC, colnames(loadings))
    })
    
    output$loadingPlot <- renderPlot({
        order <- loadings %>% 
            arrange(desc(abs(loadings[,pc()])))
        
        order$X <- factor(order$X, levels = order$X)
        
        ggplot(order, aes_string(x="X", y=input$loadingPC)) +
            geom_bar(stat="identity", fill = ifelse(order[,pc()] > 0, "light blue", "maroon")) +
            theme_bw() + 
            theme(axis.text.x = element_text(angle = 90, hjust=0.95, vjust=0.2, size = 10),
                  plot.title = element_text(size = 16, face = "bold"), 
                  axis.title=element_text(size=14,face="bold")) +
            labs(title = "PC Loadings", x = "Rhetorical Cluster", y = "Loadings") + 
            ylim(-0.6, 0.8)
    })
    
    output$loadingStats <- renderPrint({
        order <- loadings %>% 
            arrange(desc(abs(loadings[,pc()])))
        colnames(order) <- c("Clusters", "PC1 Loadings", "PC2 Loadings", "PC3 Loadings")
        order[1:15,c(1,pc())]
    })
    
    output$scorePlot <- renderGirafe({
        ggpScore <- ggplot(scores, aes_string(x = "Comp.1", y = "Comp.2", tooltip = "X", data_id = "X_woq",
                                              color = input$chooseColor)) +
            geom_point_interactive(size = 4) +
            geom_encircle(expand = -0.05, s_shape = 2, aes_string(group = input$chooseColor)) +
            theme_bw() +
            theme(axis.text.x = element_text(angle = 90, hjust=0.95, vjust=0.2, size = 12),
                  plot.title = element_text(size = 18, face = "bold"), 
                  axis.title = element_text(size=16,face="bold"),
                  legend.position = "bottom") + 
            labs(title = "Visualization Using First Two Principle Components", x = "PC1", y = "PC2") 
        girafe(code = {print(ggpScore)},
               options = list(opts_selection(type = "single", only_shiny = TRUE), opts_toolbar(saveaspng = FALSE)),
               width_svg = 12, height_svg = 10
        ) 
    })
    
    output$loadingSummary1 <- renderPrint({
        order1 <- loadings %>%
            arrange(desc(abs(loadings[,2])))
        colnames(order1) <- c("Clusters", "PC1 Loadings", "PC2 Loadings", "PC3 Loadings")
        pc1 <- order1[1:5,1:2]
        pc1
    })
    output$loadingSummary2 <- renderPrint({
        order2 <- loadings %>%
            arrange(desc(abs(loadings[,3])))
        colnames(order2) <- c("Clusters", "PC1 Loadings", "PC2 Loadings", "PC3 Loadings")
        pc2 <- order2[1:5,c(1,3)]
        pc2
    })
    
    output$sparsePlot <- renderPlotly({
        selected <- sparseScores %>%
            filter(Fulltag == input$choosePoint)
        
        ggp <- ggplot(sparseScores, aes(x = PC1, y = PC2, text = Fulltag)) +
            geom_point(alpha = ifelse(sparseScores$Fulltag == input$choosePoint, 1, 0.6), color = ifelse(sparseScores$Fulltag == input$choosePoint, 'red', 'black'), size = ifelse(sparseScores$Fulltag == input$choosePoint, 3, 2)) +
            # geom_point(data = selected, aes(x = PC1, y = PC2), color = "red", size = 2)
            theme_bw() +
            theme(
                plot.title = element_text(size = 18, face = "bold"),
                axis.title = element_text(size=16,face="bold"),
                legend.position = "bottom",
            ) +
            labs(title = "Sparse PCA Visualization", x = "PC1", y = "PC2")
        
        # girafe(code = {print(ggScore)},
        #        options = list(opts_selection(type = "single", only_shiny = TRUE), opts_toolbar(saveaspng = FALSE)),
        #        width_svg = 10, height_svg = 10
        
        # ) 
        
        ggplotly(ggp, tooltip = "text")
    })
    
    speechSelect <- reactive({
        d <- event_data("plotly_click")
        pointNum <- d$pointNumber + 1
        sparseScores$X_woq[pointNum]
    })
    
    output$click_info <- renderPrint({
        cat(speechSelect())
    })
    
    output$profile1_main_plot <- renderPlot({
        p1main + gghighlight(p1main.melt$Fulltag == speechSelect(), use_direct_label = F) 
    })
    
    output$profile1_secondary_plot <- renderPlot({
        p1secondary + gghighlight(p1secondary.melt$Fulltag == speechSelect(), use_direct_label = F)
    })
    
    output$profile2_main_plot <- renderPlot({
        p2main + gghighlight(p2main.melt$Fulltag == speechSelect(), use_direct_label = F)
    })
    
    output$profile2_secondary_plot <- renderPlot({
        p2secondary + gghighlight(p2secondary.melt$Fulltag == speechSelect(), use_direct_label = F)
    })
    
    # output$profile1_percentile <- renderPrint({
    #     cat("Info Profile\nAcademic Percentile: ")
    #     cat(SPEECHES$Academic_percentile[SPEECHES$Fulltag == speechSelect()])
    #     cat("\nPublic Percentile: ")
    #     cat(SPEECHES$Public_percentile[SPEECHES$Fulltag == speechSelect()])
    # })
    # 
    # output$profile2_percentile <- renderPrint({
    #     cat("Involvement Profile\nFirst Person Percentile: ")
    #     cat(SPEECHES$FirstPerson_percentile[SPEECHES$Fulltag == speechSelect()])
    #     cat("\nInteractive Percentile: ")
    #     cat(SPEECHES$Interactive_percentile[SPEECHES$Fulltag == speechSelect()])
    #     cat("\nReasoning Percentile: ")
    #     cat(SPEECHES$Reasoning_percentile[SPEECHES$Fulltag == speechSelect()])
    # })
    
    output$profile1_percentile <- DT::renderDataTable({
        rowNum <- which(SPEECHES$Fulltag == speechSelect())
        datatable(SPEECHES[rowNum,35:39], rownames = F,
                  option = list(pageLength = 1, dom = 't', 
                                columnDefs = list(list(className = "dt-center", targets = "_all"))), caption = htmltools::tags$caption(
                                    style ='caption-side: top; text-align: center;', 
                                    htmltools::strong('Info Profile Percentiles')),
                  colnames = c("Academic", "Public", "Emotion_Negative", "Relations_Negative", "Values_Negative")) %>%
            formatStyle('Academic_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","maroon")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Public_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","maroon")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Emotion_Negative_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","steelblue")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Relations_Negative_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","steelblue")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Values_Negative_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","steelblue")),
                        color = styleInterval(0.49, c("black","white"))) 
        
    })
    
    output$profile2_percentile <- DT::renderDataTable({
        rowNum <- which(SPEECHES$Fulltag == speechSelect())
        datatable(SPEECHES[rowNum,40:45], rownames = F,
                  option = list(pageLength = 1, dom = 't',
                                columnDefs = list(list(className = "dt-center", targets = "_all"))), 
                  caption = htmltools::tags$caption(
                      style ='caption-side: top; text-align: center;', 
                      htmltools::strong('Involvement Profile Percentiles')),
                  colnames = c("First Person", "Interactive", "Reasoning", "Emotion_Positive", "Relations_Positive", "Values_Positive")) %>%
            formatStyle('FirstPerson_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","maroon")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Interactive_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","maroon")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Reasoning_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","maroon")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Emotion_Positive_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","steelblue")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Relations_Positive_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","steelblue")),
                        color = styleInterval(0.49, c("black","white"))) %>%
            formatStyle('Values_Positive_percentile', fontWeight = styleInterval(0.5, c('normal', 'bold')), 
                        backgroundColor = styleInterval(0.49, c("none","steelblue")),
                        color = styleInterval(0.49, c("black","white"))) 
        
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
